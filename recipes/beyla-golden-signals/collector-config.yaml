# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel
spec:
  image: otel/opentelemetry-collector-contrib:0.90.0
  config: |
    receivers:
      # receive OTLP metrics from Beyla
      otlp:
        protocols:
          grpc:
          http:
    processors:
      # detect gke resource attributes
      resourcedetection:
        detectors: [env, gcp]
        timeout: 2s
        override: false
      # Filter out metrics that aren't relevant about pods
      filter:
        metrics:
          metric:
            # not about pods
            - resource.attributes["k8s.pod.name"] == nil
            # not relevant to the GKE applications dashboard. You can comment the line below to
            # pass through all metrics generated by Beyla
            - name != "http.server.duration"
      # Transform metrics to match GMP http server conventions:
      # https://cloud.google.com/stackdriver/docs/managed-prometheus/exporters/server/http
      transform/prometheusconventions:
        metric_statements:
          - context: metric
            statements:
              # Create a count metric from the duration histogram and rename it to http_requests
              - extract_count_metric(true) where name == "http.server.duration"
              - set(unit, "1") where name == "http.server.duration_count"
              - set(name, "http_requests") where name == "http.server.duration_count"
              # Rename duration histogram
              # TODO: change to copy_metric once collector is upgraded
              - set(name, "http_request_duration") where name == "http.server.duration"
          - context: datapoint
            statements:
              - set(attributes["code"], attributes["http.response.status_code"])
              - delete_key(attributes, "http.response.status_code")
              - set(attributes["method"], attributes["http.request.method"])
              - delete_key(attributes, "http.request.method")
              # GMP metrics are expected to be double
              - set(value_double, Double(value_int))
      resource/podinstance:
        attributes:
          - key: pod
            from_attribute: k8s.pod.name
            action: upsert
          - key: service.instance.id
            from_attribute: k8s.pod.uid
            action: upsert
    exporters:
      googlemanagedprometheus:
        metric:
          resource_filters:
            - regex: 'pod'
      googlecloud:
      logging:
        loglevel: debug
    service:
      pipelines:
        metrics:
          receivers: [otlp]
          processors: [resource/podinstance, filter, transform/prometheusconventions, resourcedetection]
          exporters: [logging, googlemanagedprometheus]
